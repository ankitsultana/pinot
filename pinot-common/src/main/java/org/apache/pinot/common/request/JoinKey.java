/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.common.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-08-08")
public class JoinKey implements org.apache.thrift.TBase<JoinKey, JoinKey._Fields>, java.io.Serializable, Cloneable, Comparable<JoinKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JoinKey");

  private static final org.apache.thrift.protocol.TField COLUMN_INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnIndices", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JoinKeyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JoinKeyTupleSchemeFactory());
  }

  private List<Short> columnIndices; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_INDICES((short)1, "columnIndices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_INDICES
          return COLUMN_INDICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_INDICES, new org.apache.thrift.meta_data.FieldMetaData("columnIndices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JoinKey.class, metaDataMap);
  }

  public JoinKey() {
  }

  public JoinKey(
    List<Short> columnIndices)
  {
    this();
    this.columnIndices = columnIndices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JoinKey(JoinKey other) {
    if (other.isSetColumnIndices()) {
      List<Short> __this__columnIndices = new ArrayList<Short>(other.columnIndices);
      this.columnIndices = __this__columnIndices;
    }
  }

  public JoinKey deepCopy() {
    return new JoinKey(this);
  }

  @Override
  public void clear() {
    this.columnIndices = null;
  }

  public int getColumnIndicesSize() {
    return (this.columnIndices == null) ? 0 : this.columnIndices.size();
  }

  public java.util.Iterator<Short> getColumnIndicesIterator() {
    return (this.columnIndices == null) ? null : this.columnIndices.iterator();
  }

  public void addToColumnIndices(short elem) {
    if (this.columnIndices == null) {
      this.columnIndices = new ArrayList<Short>();
    }
    this.columnIndices.add(elem);
  }

  public List<Short> getColumnIndices() {
    return this.columnIndices;
  }

  public void setColumnIndices(List<Short> columnIndices) {
    this.columnIndices = columnIndices;
  }

  public void unsetColumnIndices() {
    this.columnIndices = null;
  }

  /** Returns true if field columnIndices is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnIndices() {
    return this.columnIndices != null;
  }

  public void setColumnIndicesIsSet(boolean value) {
    if (!value) {
      this.columnIndices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_INDICES:
      if (value == null) {
        unsetColumnIndices();
      } else {
        setColumnIndices((List<Short>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_INDICES:
      return getColumnIndices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_INDICES:
      return isSetColumnIndices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JoinKey)
      return this.equals((JoinKey)that);
    return false;
  }

  public boolean equals(JoinKey that) {
    if (that == null)
      return false;

    boolean this_present_columnIndices = true && this.isSetColumnIndices();
    boolean that_present_columnIndices = true && that.isSetColumnIndices();
    if (this_present_columnIndices || that_present_columnIndices) {
      if (!(this_present_columnIndices && that_present_columnIndices))
        return false;
      if (!this.columnIndices.equals(that.columnIndices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_columnIndices = true && (isSetColumnIndices());
    list.add(present_columnIndices);
    if (present_columnIndices)
      list.add(columnIndices);

    return list.hashCode();
  }

  @Override
  public int compareTo(JoinKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetColumnIndices()).compareTo(other.isSetColumnIndices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnIndices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnIndices, other.columnIndices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JoinKey(");
    boolean first = true;

    sb.append("columnIndices:");
    if (this.columnIndices == null) {
      sb.append("null");
    } else {
      sb.append(this.columnIndices);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetColumnIndices()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnIndices' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JoinKeyStandardSchemeFactory implements SchemeFactory {
    public JoinKeyStandardScheme getScheme() {
      return new JoinKeyStandardScheme();
    }
  }

  private static class JoinKeyStandardScheme extends StandardScheme<JoinKey> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JoinKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_INDICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.columnIndices = new ArrayList<Short>(_list54.size);
                short _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readI16();
                  struct.columnIndices.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setColumnIndicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JoinKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnIndices != null) {
        oprot.writeFieldBegin(COLUMN_INDICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.columnIndices.size()));
          for (short _iter57 : struct.columnIndices)
          {
            oprot.writeI16(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JoinKeyTupleSchemeFactory implements SchemeFactory {
    public JoinKeyTupleScheme getScheme() {
      return new JoinKeyTupleScheme();
    }
  }

  private static class JoinKeyTupleScheme extends TupleScheme<JoinKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JoinKey struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.columnIndices.size());
        for (short _iter58 : struct.columnIndices)
        {
          oprot.writeI16(_iter58);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JoinKey struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
        struct.columnIndices = new ArrayList<Short>(_list59.size);
        short _elem60;
        for (int _i61 = 0; _i61 < _list59.size; ++_i61)
        {
          _elem60 = iprot.readI16();
          struct.columnIndices.add(_elem60);
        }
      }
      struct.setColumnIndicesIsSet(true);
    }
  }

}

