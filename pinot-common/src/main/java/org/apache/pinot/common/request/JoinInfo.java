/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.common.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-08-08")
public class JoinInfo implements org.apache.thrift.TBase<JoinInfo, JoinInfo._Fields>, java.io.Serializable, Cloneable, Comparable<JoinInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JoinInfo");

  private static final org.apache.thrift.protocol.TField LEFT_JOIN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("leftJoinKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RIGHT_JOIN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rightJoinKey", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LEFT_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("leftQuery", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RIGHT_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("rightQuery", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JoinInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JoinInfoTupleSchemeFactory());
  }

  private JoinKey leftJoinKey; // required
  private JoinKey rightJoinKey; // required
  private PinotQuery leftQuery; // required
  private PinotQuery rightQuery; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_JOIN_KEY((short)1, "leftJoinKey"),
    RIGHT_JOIN_KEY((short)2, "rightJoinKey"),
    LEFT_QUERY((short)3, "leftQuery"),
    RIGHT_QUERY((short)4, "rightQuery");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_JOIN_KEY
          return LEFT_JOIN_KEY;
        case 2: // RIGHT_JOIN_KEY
          return RIGHT_JOIN_KEY;
        case 3: // LEFT_QUERY
          return LEFT_QUERY;
        case 4: // RIGHT_QUERY
          return RIGHT_QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_JOIN_KEY, new org.apache.thrift.meta_data.FieldMetaData("leftJoinKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "JoinKey")));
    tmpMap.put(_Fields.RIGHT_JOIN_KEY, new org.apache.thrift.meta_data.FieldMetaData("rightJoinKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "JoinKey")));
    tmpMap.put(_Fields.LEFT_QUERY, new org.apache.thrift.meta_data.FieldMetaData("leftQuery", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PinotQuery.class)));
    tmpMap.put(_Fields.RIGHT_QUERY, new org.apache.thrift.meta_data.FieldMetaData("rightQuery", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PinotQuery.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JoinInfo.class, metaDataMap);
  }

  public JoinInfo() {
  }

  public JoinInfo(
    JoinKey leftJoinKey,
    JoinKey rightJoinKey,
    PinotQuery leftQuery,
    PinotQuery rightQuery)
  {
    this();
    this.leftJoinKey = leftJoinKey;
    this.rightJoinKey = rightJoinKey;
    this.leftQuery = leftQuery;
    this.rightQuery = rightQuery;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JoinInfo(JoinInfo other) {
    if (other.isSetLeftJoinKey()) {
      this.leftJoinKey = other.leftJoinKey;
    }
    if (other.isSetRightJoinKey()) {
      this.rightJoinKey = other.rightJoinKey;
    }
    if (other.isSetLeftQuery()) {
      this.leftQuery = new PinotQuery(other.leftQuery);
    }
    if (other.isSetRightQuery()) {
      this.rightQuery = new PinotQuery(other.rightQuery);
    }
  }

  public JoinInfo deepCopy() {
    return new JoinInfo(this);
  }

  @Override
  public void clear() {
    this.leftJoinKey = null;
    this.rightJoinKey = null;
    this.leftQuery = null;
    this.rightQuery = null;
  }

  public JoinKey getLeftJoinKey() {
    return this.leftJoinKey;
  }

  public void setLeftJoinKey(JoinKey leftJoinKey) {
    this.leftJoinKey = leftJoinKey;
  }

  public void unsetLeftJoinKey() {
    this.leftJoinKey = null;
  }

  /** Returns true if field leftJoinKey is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftJoinKey() {
    return this.leftJoinKey != null;
  }

  public void setLeftJoinKeyIsSet(boolean value) {
    if (!value) {
      this.leftJoinKey = null;
    }
  }

  public JoinKey getRightJoinKey() {
    return this.rightJoinKey;
  }

  public void setRightJoinKey(JoinKey rightJoinKey) {
    this.rightJoinKey = rightJoinKey;
  }

  public void unsetRightJoinKey() {
    this.rightJoinKey = null;
  }

  /** Returns true if field rightJoinKey is set (has been assigned a value) and false otherwise */
  public boolean isSetRightJoinKey() {
    return this.rightJoinKey != null;
  }

  public void setRightJoinKeyIsSet(boolean value) {
    if (!value) {
      this.rightJoinKey = null;
    }
  }

  public PinotQuery getLeftQuery() {
    return this.leftQuery;
  }

  public void setLeftQuery(PinotQuery leftQuery) {
    this.leftQuery = leftQuery;
  }

  public void unsetLeftQuery() {
    this.leftQuery = null;
  }

  /** Returns true if field leftQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftQuery() {
    return this.leftQuery != null;
  }

  public void setLeftQueryIsSet(boolean value) {
    if (!value) {
      this.leftQuery = null;
    }
  }

  public PinotQuery getRightQuery() {
    return this.rightQuery;
  }

  public void setRightQuery(PinotQuery rightQuery) {
    this.rightQuery = rightQuery;
  }

  public void unsetRightQuery() {
    this.rightQuery = null;
  }

  /** Returns true if field rightQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetRightQuery() {
    return this.rightQuery != null;
  }

  public void setRightQueryIsSet(boolean value) {
    if (!value) {
      this.rightQuery = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEFT_JOIN_KEY:
      if (value == null) {
        unsetLeftJoinKey();
      } else {
        setLeftJoinKey((JoinKey)value);
      }
      break;

    case RIGHT_JOIN_KEY:
      if (value == null) {
        unsetRightJoinKey();
      } else {
        setRightJoinKey((JoinKey)value);
      }
      break;

    case LEFT_QUERY:
      if (value == null) {
        unsetLeftQuery();
      } else {
        setLeftQuery((PinotQuery)value);
      }
      break;

    case RIGHT_QUERY:
      if (value == null) {
        unsetRightQuery();
      } else {
        setRightQuery((PinotQuery)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_JOIN_KEY:
      return getLeftJoinKey();

    case RIGHT_JOIN_KEY:
      return getRightJoinKey();

    case LEFT_QUERY:
      return getLeftQuery();

    case RIGHT_QUERY:
      return getRightQuery();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEFT_JOIN_KEY:
      return isSetLeftJoinKey();
    case RIGHT_JOIN_KEY:
      return isSetRightJoinKey();
    case LEFT_QUERY:
      return isSetLeftQuery();
    case RIGHT_QUERY:
      return isSetRightQuery();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JoinInfo)
      return this.equals((JoinInfo)that);
    return false;
  }

  public boolean equals(JoinInfo that) {
    if (that == null)
      return false;

    boolean this_present_leftJoinKey = true && this.isSetLeftJoinKey();
    boolean that_present_leftJoinKey = true && that.isSetLeftJoinKey();
    if (this_present_leftJoinKey || that_present_leftJoinKey) {
      if (!(this_present_leftJoinKey && that_present_leftJoinKey))
        return false;
      if (!this.leftJoinKey.equals(that.leftJoinKey))
        return false;
    }

    boolean this_present_rightJoinKey = true && this.isSetRightJoinKey();
    boolean that_present_rightJoinKey = true && that.isSetRightJoinKey();
    if (this_present_rightJoinKey || that_present_rightJoinKey) {
      if (!(this_present_rightJoinKey && that_present_rightJoinKey))
        return false;
      if (!this.rightJoinKey.equals(that.rightJoinKey))
        return false;
    }

    boolean this_present_leftQuery = true && this.isSetLeftQuery();
    boolean that_present_leftQuery = true && that.isSetLeftQuery();
    if (this_present_leftQuery || that_present_leftQuery) {
      if (!(this_present_leftQuery && that_present_leftQuery))
        return false;
      if (!this.leftQuery.equals(that.leftQuery))
        return false;
    }

    boolean this_present_rightQuery = true && this.isSetRightQuery();
    boolean that_present_rightQuery = true && that.isSetRightQuery();
    if (this_present_rightQuery || that_present_rightQuery) {
      if (!(this_present_rightQuery && that_present_rightQuery))
        return false;
      if (!this.rightQuery.equals(that.rightQuery))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_leftJoinKey = true && (isSetLeftJoinKey());
    list.add(present_leftJoinKey);
    if (present_leftJoinKey)
      list.add(leftJoinKey);

    boolean present_rightJoinKey = true && (isSetRightJoinKey());
    list.add(present_rightJoinKey);
    if (present_rightJoinKey)
      list.add(rightJoinKey);

    boolean present_leftQuery = true && (isSetLeftQuery());
    list.add(present_leftQuery);
    if (present_leftQuery)
      list.add(leftQuery);

    boolean present_rightQuery = true && (isSetRightQuery());
    list.add(present_rightQuery);
    if (present_rightQuery)
      list.add(rightQuery);

    return list.hashCode();
  }

  @Override
  public int compareTo(JoinInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLeftJoinKey()).compareTo(other.isSetLeftJoinKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftJoinKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftJoinKey, other.leftJoinKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightJoinKey()).compareTo(other.isSetRightJoinKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightJoinKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightJoinKey, other.rightJoinKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftQuery()).compareTo(other.isSetLeftQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftQuery, other.leftQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightQuery()).compareTo(other.isSetRightQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightQuery, other.rightQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JoinInfo(");
    boolean first = true;

    sb.append("leftJoinKey:");
    if (this.leftJoinKey == null) {
      sb.append("null");
    } else {
      sb.append(this.leftJoinKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightJoinKey:");
    if (this.rightJoinKey == null) {
      sb.append("null");
    } else {
      sb.append(this.rightJoinKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftQuery:");
    if (this.leftQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.leftQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightQuery:");
    if (this.rightQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.rightQuery);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetLeftJoinKey()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'leftJoinKey' is unset! Struct:" + toString());
    }

    if (!isSetRightJoinKey()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rightJoinKey' is unset! Struct:" + toString());
    }

    if (!isSetLeftQuery()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'leftQuery' is unset! Struct:" + toString());
    }

    if (!isSetRightQuery()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rightQuery' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (leftQuery != null) {
      leftQuery.validate();
    }
    if (rightQuery != null) {
      rightQuery.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JoinInfoStandardSchemeFactory implements SchemeFactory {
    public JoinInfoStandardScheme getScheme() {
      return new JoinInfoStandardScheme();
    }
  }

  private static class JoinInfoStandardScheme extends StandardScheme<JoinInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JoinInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_JOIN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leftJoinKey = new JoinKey();
              struct.leftJoinKey.read(iprot);
              struct.setLeftJoinKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RIGHT_JOIN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rightJoinKey = new JoinKey();
              struct.rightJoinKey.read(iprot);
              struct.setRightJoinKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEFT_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leftQuery = new PinotQuery();
              struct.leftQuery.read(iprot);
              struct.setLeftQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RIGHT_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rightQuery = new PinotQuery();
              struct.rightQuery.read(iprot);
              struct.setRightQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JoinInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.leftJoinKey != null) {
        oprot.writeFieldBegin(LEFT_JOIN_KEY_FIELD_DESC);
        struct.leftJoinKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rightJoinKey != null) {
        oprot.writeFieldBegin(RIGHT_JOIN_KEY_FIELD_DESC);
        struct.rightJoinKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.leftQuery != null) {
        oprot.writeFieldBegin(LEFT_QUERY_FIELD_DESC);
        struct.leftQuery.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rightQuery != null) {
        oprot.writeFieldBegin(RIGHT_QUERY_FIELD_DESC);
        struct.rightQuery.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JoinInfoTupleSchemeFactory implements SchemeFactory {
    public JoinInfoTupleScheme getScheme() {
      return new JoinInfoTupleScheme();
    }
  }

  private static class JoinInfoTupleScheme extends TupleScheme<JoinInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JoinInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.leftJoinKey.write(oprot);
      struct.rightJoinKey.write(oprot);
      struct.leftQuery.write(oprot);
      struct.rightQuery.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JoinInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.leftJoinKey = new JoinKey();
      struct.leftJoinKey.read(iprot);
      struct.setLeftJoinKeyIsSet(true);
      struct.rightJoinKey = new JoinKey();
      struct.rightJoinKey.read(iprot);
      struct.setRightJoinKeyIsSet(true);
      struct.leftQuery = new PinotQuery();
      struct.leftQuery.read(iprot);
      struct.setLeftQueryIsSet(true);
      struct.rightQuery = new PinotQuery();
      struct.rightQuery.read(iprot);
      struct.setRightQueryIsSet(true);
    }
  }

}

